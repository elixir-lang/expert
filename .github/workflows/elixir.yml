name: Elixir CI

# Define workflow that runs when changes are pushed to the
# `main` branch or pushed to a PR branch that targets the `main`
# branch. Change the branch name if your project uses a
# different name for the main branch like "master" or "production".
on:
  push:
    branches: ["main", "releases/**", "feat/**", "fix/**"] # adapt branch for project
  pull_request:
    branches: ["main"] # adapt branch for project

# Sets the ENV `MIX_ENV` to `test` for running tests
env:
  MIX_ENV: test
  # Default elixir and otp are the ones that we validate
  # against. Formatting and types can change from version to version,
  # so keeping credo, dialyzer and formatting checks in the matrix
  # would create an impossible situation, as different versions would have
  # different rules
  DEFAULT_ELIXIR: 1.15.8-otp-25
  DEFAULT_OTP: 25.3.2.4

permissions:
  contents: read

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    name: Static analysis
    steps:
      # Step: Setup Elixir + Erlang image as the base
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.DEFAULT_OTP }}
          elixir-version: ${{ env.DEFAULT_ELIXIR }}
          version-type: "strict"

      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            apps/**/deps
            apps/**/_build

          key: ${{ runner.os }}-mix-${{ env.DEFAULT_ELIXIR }}-${{ env.DEFAULT_OTP }}-${{ hashFiles('apps/**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.DEFAULT_ELIXIR }}-${{ env.DEFAULT_OTP }}-

      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Install and compile dependencies
        run: |
          make deps.poncho
          make deps.compile.poncho

      - name: Compile and don't let warnings through
        run: make compile.poncho

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      # Customize this step as desired.
      - name: Check Formatting
        run: MIX_ENV=dev mix format --check-formatted

      # Step: Run credo static code analysis
      - name: Credo static analysis
        run: make credo.check.poncho

  dialyzer:
    runs-on: ubuntu-latest
    name: Run Dialyzer
    env:
      apps_mix_lock: ${{ format('{0}{1}', github.workspace, 'apps/**/mix.lock') }}
      MIX_ENV: dev
    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.DEFAULT_OTP }}
          elixir-version: ${{ env.DEFAULT_ELIXIR }}
          version-type: "strict"

      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps-1
        with:
          path: |
            apps/**/deps
            apps/**/_build

          key: ${{ runner.os }}-mix-${{ env.DEFAULT_ELIXIR }}-${{ env.DEFAULT_OTP }}-${{ hashFiles('apps/**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.DEFAULT_ELIXIR }}-${{ env.DEFAULT_OTP }}-

      # Step: Create dialyzer .plt files if they're not present
      - name: Cache dialyzer plt files
        id: cache-plt
        uses: actions/cache@v4
        with:
          path: "priv/plts"
          key: expert-plts-2-${{ env.DEFAULT_OTP }}-${{ env.DEFAULT_ELIXIR }}-${{ hashFiles('apps/**/mix.lock' ) }}-${{ github.run_id }}
          restore-keys: |
            expert-plts-2-${{ env.DEFAULT_OTP }}-${{ env.DEFAULT_ELIXIR }}-${{ hashFiles('apps/**/mix.lock') }}-
            expert-plts-2-${{ env.DEFAULT_OTP }}-${{ env.DEFAULT_ELIXIR }}-

      - name: Install and compile dependencies
        run: make deps.compile.poncho

      - name: Compile
        run: make compile.all

      - name: Maybe create plt files
        if: steps.cache-plt.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          make dialyzer.plt.all

      - name: Run dialyzer
        run: |
          make compile.protocols.poncho
          make dialyzer.all

  release-test:
    runs-on: ${{matrix.os.name}}
    name: Release test (${{matrix.os.name}})
    strategy:
      matrix:
        os:
          - name: ubuntu-latest
            target: linux_amd64
          - name: macos-14
            target: darwin_arm64
          - name: macos-13
            target: darwin_amd64

        include:
          - elixir: "1.15.8"
            otp: "27"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      - uses: mlugg/setup-zig@v2
        with:
          version: "0.14.0"

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            apps/**/deps
            apps/**/_build

          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('apps/**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-

      - name: Build and release
        env:
          MIX_ENV: prod
          BURRITO_TARGET: ${{ matrix.os.target }}
        run: make build.engine && cd apps/expert && mix deps.get && mix release expert

  test:
    runs-on: ubuntu-latest
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        include:
          - elixir: "1.18.1"
            otp: "27"
          - elixir: "1.18.1"
            otp: "26"
          - elixir: "1.17"
            otp: "27"
          - elixir: "1.17"
            otp: "26"
          - elixir: "1.17"
            otp: "25"
          - elixir: "1.16"
            otp: "26"
          - elixir: "1.16"
            otp: "25"
          - elixir: "1.15.8"
            otp: "26"
          - elixir: "1.15.8"
            otp: "25"
    steps:
      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step: Setup Elixir + Erlang image as the base.
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            apps/**/deps
            apps/**/_build

          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('apps/**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-

      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Install and compile the app
        run: make compile.poncho

      # Step: Execute the tests.
      - name: Run tests
        run: make test.all
