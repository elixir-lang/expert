name: Release Expert

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
        id: release

  draft:
    name: draft
    needs: release
    env:
      GH_TOKEN: ${{ github.token }}
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - run: gh release edit ${{ needs.release.outputs.tag_name }} --draft=true --repo='elixir-lang/expert'

  build:
    needs: [release, draft]
    runs-on: macos-14
    if: ${{ needs.release.outputs.release_created }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: elixir-tools
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - run: nix develop --command bash -c 'mix local.hex --force'
      - run: nix develop --command bash -c 'mix local.rebar --force'
      - run: chmod +x priv/cmd
      - run: nix develop --command bash -c 'make release'
        env:
          MIX_ENV: prod
      - name: Create Checksum
        run: |
          cd ./apps/expert/burrito_out
          chmod +x ./*
          shasum -a 256 ./* > expert_checksums.txt
          cd ..
      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: gh release upload ${{ needs.release.outputs.tag_name }} ./apps/expert/burrito_out/*

  publish:
    name: publish
    needs: [release, draft, build]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - run: gh release edit ${{ needs.release.outputs.tag_name }} --draft=false --repo='elixir-lang/expert'
